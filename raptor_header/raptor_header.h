#ifndef RAPTOR_HEADER
#define RAPTOR10_HEADER

#include <stdint.h>
#include <stdlib.h>
#include<strings.h>
#include "gf2matrix.h"
#include "queue.h"
#include "raptor_consts.h" // J, C1 and C2
typedef unsigned char byte;

/**
 * Struct containing all the fileds needed by the raptor code to operate
 * @struct raptor
 * @brief Structure holding all the fields needed by raptor encoder and
 * decoder
 * @var raptor::F Transfer length of the object, in bytes
 * @var raptor::Al symbol alignment parameter
 * @var raptor::T symbol size, in bytes
 * @var raptor::Z number of source blocks
 * @var raptor::N number of sub-blocks in each source block
 * @var raptor::W a target on the sub-block size
 * @var raptor::P maximum packet payload size (multiple of ~Al~)
 * @var raptor::Kmax maximum number of source symbols per source block
 * @var raptor::Kmin minimum target on the number of symbols per source block
 * @var raptor::Gmax maximum target number of symbols per packet
 * @var raptor::K denotes the number of symbols in a single source block
 * @var raptor::L denotes the number of pre-coding symbols for a single source block
 * @var raptor::S denotes the number of LDPC symbols for a single source block
 * @var raptor::H denotes the number of Half symbols for a single source block
 * @var raptor::G the number of symbols within an encoding symbol group
 */
typedef struct {
  uint32_t F;
  uint32_t W;
  uint32_t P;
  uint32_t Al;
  uint32_t Kmax;
  uint32_t Kmin;
  uint32_t Gmax;
  uint32_t T;
  uint32_t Z;
  uint32_t N;
  uint32_t K;
  uint32_t L;
  uint32_t S;
  uint32_t H;
  uint32_t G;
} raptor;

raptor* build_raptor(unsigned long file_size);
/**
 * Factorial function
 * @param n number of which to make the factorial
 * @return the factorial
 */
uint32_t factorial(uint32_t n);

/**
 * Determine whether the provided number is prime or not
 * @param n number to test for primeness
 * @return 1 if the provided number is prime, 0 otherwise
 */
int is_prime(uint32_t n);

/**
 * Choose: binomial choosing among numbers
 * @param i first number
 * @param i second number
 * @return binomial
 */
uint32_t choose(int i, int j);

/**
 * Rand function generate pseudo-random numbers
 * The output is an integer between 0 and m-1. V0 and V1 are arrays of 4-bytes
 * values.
 */
uint32_t raptor_Rand(uint32_t X, uint32_t i, uint32_t m);

/**
 * Random degree generation
 * @param v selector ft the degree
 */
uint32_t raptor_Deg(uint32_t v);

/**
 * Funtion that implements the triple generator as specified in RFC 5053
 * @param K number of source symbols
 * @param X encoding symbolm ID
 * @param triple return array parameter
 */
void raptor_Trip(uint32_t K, uint32_t X, uint32_t triple[3], raptor *obj);

/**
 * Core oncoding function as specified by RFC5053
 * @param K number of source symbols
 * @param C array of intermediate symbols
 * @param triple triple generated by function Trip()
 */
void raptor_LTEnc(uint32_t X, uint32_t K, uint32_t *C, uint32_t triple[3],
               uint32_t G, raptor obj);

/**
 * Function that buils the LDPC submatrix
 *
 */
int raptor_build_LDPC_submat(int K, int S, gf2matrix *A);

/**
 * Function that builds the Half submatrix
 */
int raptor_build_Half_submat(unsigned int K, unsigned int S, unsigned int H,
                          gf2matrix *A);

/**
 * Function that builds the LT submatrix
 */
int raptor_build_LT_submat(uint32_t K, uint32_t S, uint32_t H, raptor *obj,
                        gf2matrix *A);

/**
 * Function that builds the LT matrix.
 */
void raptor_build_LT_mat(uint32_t N, raptor *obj, gf2matrix *G_LT,
                      uint32_t *ESIs);

/**
 * Function that builds the Constraints matrix
 */
int raptor_build_constraints_mat(raptor *obj, gf2matrix *A);

/**
 * Function responsible for computing all the needed parameters.
 * @param raptor_obj raptor object to configure
 */
void raptor_compute_params(raptor *obj);

/**
 * Method the perform the XOR multiplication
 * It mutiplies a GF(2) matrix, A, with a symbol-based array, block,
 * where the symbol size is T and the matrix is a gf2matrix.
 * @param obj pointer to a raptor specs object
 * @param A pointer to a gf2matrix encoding matrix
 * @param block array of symbols to right multiply
 * @param res_block return param with the resulting symbols
 */
// void raptor_multiplication(raptor *obj, gf2matrix *A, uint8_t *block,
void raptor_multiplication(raptor *obj, gf2matrix *A, byte **block,byte** res_block);

/**
 * Encoding function
 * @param src_s source symbols block, to be encoded
 * @param enc_s return parameter for the encoded symbols block
 * @param obj raptor coder object with configuration parameters
 * @param A constraints matrix
 */
void raptor_encode(uint8_t *src_s, uint8_t *enc_s, raptor *obj, gf2matrix *A);

void my_encode(uint8_t *src_s,uint8_t* enc_s, raptor* obj);
void my_decode(uint8_t* enc_s, raptor* obj,uint32_t* ESIs,uint32_t n);
/**
 * Decoding function
 * @param enc_s something encoded symbols block, to be decoded
 * @param dec_s return parameter for the decoded symbols block
 * @param obj raptor coder object
 * @param A constraints matrix
 * @param N_ number of encoded symbols correctly received and passed to decoder
 * @param ESIs array of the ESI of the correctly received symbols
 */
void raptor_decode(uint8_t *enc_s, uint8_t *dec_s, raptor *obj, gf2matrix *A,uint32_t N_, uint32_t *ESIs);
int gaussian_elimination(gf2matrix* mat, uint8_t *result, int size,raptor* obj);
int gaussian_elim(gf2matrix* mat, byte** result,raptor* obj,int*);

byte** rapter_generate_intermediate_symb(raptor* obj,byte** data);


void xor(byte* result,byte* a,byte* b,uint32_t n);
void copy_row(raptor* obj,gf2matrix* mat1,uint32_t mat1_row,gf2matrix* mat2,uint32_t mat2_row);
void LTEncode(raptor* obj,gf2matrix* mat,uint32_t x, uint32_t row_index ,uint32_t L_);
#endif
